name: Multi-Repo Integration

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  count_pending_prs:
    runs-on: ubuntu-latest
    outputs:
      repo_names: ${{ steps.parse_manifest.outputs.repo_names }}  # Sortie avec les noms des repos
      repo_branches: ${{ steps.parse_manifest.outputs.repo_branches }}  # Sortie avec les branches des repos

    steps:
      - name: Checkout Coordinator Repo
        uses: actions/checkout@v4

      - name: Parse Integration Manifest and Count Repositories in Pending Changesets
        id: parse_manifest
        run: |
          # Extract and count the number of PRs in the pending changeset
          PR_COUNT=$(yq eval '.changesets[0].repositories | length' integration.yaml)
          # Extract repositories and branches as JSON arrays
          REPO_NAMES=$(yq eval '.changesets[0].repositories | map(.name) | @json' integration.yaml)
          REPO_BRANCHES=$(yq eval '.changesets[0].repositories | map(.ref) | @json' integration.yaml)
          # Output the repository info to pass to the next job
          echo "REPO_NAMES_JSON=${REPO_NAMES}" >> $GITHUB_ENV
          echo "REPO_BRANCHES_JSON=${REPO_BRANCHES}" >> $GITHUB_ENV
          # Set repo_names and repo_branches as outputs
          echo "repo_names=${REPO_NAMES}" >> $GITHUB_OUTPUT
          echo "repo_branches=${REPO_BRANCHES}" >> $GITHUB_OUTPUT
      - name: Verify Repo Names and Branches
        run: |
          # Verify the REPO_NAMES and REPO_BRANCHES outputs
          echo "Repo Names: ${{ steps.parse_manifest.outputs.repo_names }}"
          echo "Repo Branches: ${{ steps.parse_manifest.outputs.repo_branches }}"

  build_repositories:
    runs-on: ubuntu-latest
    needs: count_pending_prs  # Ce job dépend du job count_pending_prs
    strategy:
      matrix:
        # Génère une matrice combinée de repo et branche
        repo: ${{ fromJson(needs.count_pending_prs.outputs.repo_names) }}  # Liste des noms des repos
        branch: ${{ fromJson(needs.count_pending_prs.outputs.repo_branches) }}  # Liste des branches des repos
    steps:
      - name: Checkout Multi-Repo Coordinator Repo
        uses: actions/checkout@v4
        with:
          repository: kalidux/multi-repo-coordinator

      - name: Parse integration.yaml and verify repositories
        run: |
          # Get the repo and branch from the matrix
          REPO_NAME=${{ matrix.repo }}
          REPO_BRANCH=${{ matrix.branch }}
          
          # Cloner le dépôt 'multi-repo-coordinator' pour accéder à integration.yaml
          git clone https://github.com/kalidux/multi-repo-coordinator.git
          cd multi-repo-coordinator

          # Vérifier si le dépôt et la branche sont présents dans integration.yaml
          BRANCH_EXISTS=$(grep -A 5 "$REPO_NAME" integration.yaml | grep "$REPO_BRANCH")
          
          if [[ -z "$BRANCH_EXISTS" ]]; then
            echo "ERROR: Branch '$REPO_BRANCH' for repo '$REPO_NAME' not found in integration.yaml"
            exit 1  # Sortir si la branche n'existe pas
          fi

          echo "Repo and branch verified in integration.yaml for $REPO_NAME - $REPO_BRANCH"
        continue-on-error: true  # Ignorer l'erreur et continuer si la branche n'est pas trouvée

      - name: Checkout Repository for PR
        run: |
          REPO_NAME=${{ matrix.repo }}
          REPO_BRANCH=${{ matrix.branch }}
          ORG_NAME=kalidux  # Organisation dynamique

          # Cloner le repo
          echo "Checking out repository $REPO_NAME on branch $REPO_BRANCH"
          
          # Clone the repository
          git clone "https://github.com/$ORG_NAME/$REPO_NAME.git"
          cd $REPO_NAME
          
          # Fetch all branches
          git fetch --all

          # Checkout the branch, or create it if it doesn't exist locally
          git checkout $REPO_BRANCH || git checkout -b $REPO_BRANCH origin/$REPO_BRANCH
          
          # Vérifier les branches disponibles
          git branch -r
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Repository
        run: |
          echo "Running build for repository ${{ matrix.repo }} on branch ${{ matrix.branch }}"
          # Add your build commands here
