name: Multi-Repo Integration

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  count_pending_prs:
    runs-on: ubuntu-latest
    outputs:
      repo_names: ${{ steps.parse_manifest.outputs.repo_names }}
      repo_branches: ${{ steps.parse_manifest.outputs.repo_branches }}

    steps:
      - name: Checkout Coordinator Repo
        uses: actions/checkout@v4

      - name: Parse Integration Manifest
        id: parse_manifest
        run: |
          PR_COUNT=$(yq eval '.changesets[0].repositories | length' integration.yaml)
          REPO_NAMES=$(yq eval '.changesets[0].repositories | map(.name) | @json' integration.yaml)
          REPO_BRANCHES=$(yq eval '.changesets[0].repositories | map(.ref) | @json' integration.yaml)
          
          echo "repo_names=${REPO_NAMES}" >> $GITHUB_OUTPUT
          echo "repo_branches=${REPO_BRANCHES}" >> $GITHUB_OUTPUT

  build_repositories:
    runs-on: ubuntu-latest
    needs: count_pending_prs
    strategy:
      matrix:
        repo: ${{ fromJson(needs.count_pending_prs.outputs.repo_names) }}
        branch: ${{ fromJson(needs.count_pending_prs.outputs.repo_branches) }}

    steps:
      - name: Checkout Multi-Repo Coordinator Repo
        uses: actions/checkout@v4
        with:
          repository: kalidux/multi-repo-coordinator
      
      - name: Parse integration.yaml and verify repositories
        id: verify_repo
        run: |
          REPO_NAME=${{ matrix.repo }}
          REPO_BRANCH=${{ matrix.branch }}
          git clone https://github.com/kalidux/multi-repo-coordinator.git || { echo "‚ùå Failed to clone multi-repo-coordinator"; exit 1; }
          cd multi-repo-coordinator
          
          if ! grep -q "name: $REPO_NAME" integration.yaml || ! grep -A 2 "name: $REPO_NAME" integration.yaml | grep -q "ref: $REPO_BRANCH"; then
            echo "‚ùå Repo '$REPO_NAME' with branch '$REPO_BRANCH' not found in integration.yaml."
            echo "repo_check=KO" >> $GITHUB_ENV
            exit 0  # Fail if repo is not found in the integration.yaml
          fi
          echo "‚úÖ Repo and branch found in integration.yaml: $REPO_NAME - $REPO_BRANCH"
          echo "repo_check=OK" >> $GITHUB_ENV
      
      - name: Checkout Repository for PR
        if: env.repo_check != 'KO'
        run: |
          REPO_NAME=${{ matrix.repo }}
          REPO_BRANCH=${{ matrix.branch }}
          ORG_NAME=kalidux
          echo "üîÑ Cloning repo $REPO_NAME and checking out branch $REPO_BRANCH"
          
          # Check if repo already exists
          if [ -d "$REPO_NAME" ]; then
            echo "‚ÑπÔ∏è Repo $REPO_NAME already cloned. Pulling latest changes."
            cd $REPO_NAME && git pull
          else
            git clone "https://github.com/$ORG_NAME/$REPO_NAME.git"
            cd $REPO_NAME
          fi
          
          git fetch --all
          git checkout $REPO_BRANCH || git checkout -b $REPO_BRANCH origin/$REPO_BRANCH
          
          git branch -r
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Repository
        working-directory: ${{ matrix.repo }}
        if: env.repo_check == 'OK'
        run: |
          echo "üöÄ Building repo ${{ matrix.repo }} on branch ${{ matrix.branch }}"
          if [ -f build.sh ]; then
            chmod +x build.sh
            ./build.sh || { echo "‚ùå Build failed for ${{ matrix.repo }}"; exit 1; }
          else
            echo "‚ùå build.sh not found in the repository."
            exit 1
          fi

      - name: Test Repository
        working-directory: ${{ matrix.repo }}
        if: env.repo_check == 'OK'
        run: |
          echo "üß™ Testing repo ${{ matrix.repo }} on branch ${{ matrix.branch }}"
          if [ -f test.sh ]; then
            chmod +x test.sh
            ./test.sh || { echo "‚ùå Tests failed for ${{ matrix.repo }}"; exit 1; }
          else
            echo "‚ùå test.sh not found in the repository."
            exit 1
          fi

      - name: Merge Pull Request if Tests Pass
        if: env.repo_check == 'OK'
        run: |
          PR_NUMBER=$(gh pr list --repo kalidux/${{ matrix.repo }} --state open --head ${{ matrix.branch }} --json number --jq '.[0].number')

          if [ -z "$PR_NUMBER" ]; then
            echo "‚ö†Ô∏è No open PR found for branch ${{ matrix.branch }} in ${{ matrix.repo }}"
            exit 0
          fi

          echo "‚úÖ Merging PR #$PR_NUMBER in ${{ matrix.repo }}"

          gh pr merge $PR_NUMBER --admin --merge --delete-branch --repo kalidux/${{ matrix.repo }} || {
            echo "‚ùå Merge failed, checking if update is needed..."
            gh pr comment $PR_NUMBER --body "üîÑ Please update the branch before merging."
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
