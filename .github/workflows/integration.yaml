name: Multi-Repo Integration

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  count_pending_prs:
    runs-on: ubuntu-latest
    outputs:
      repo_names: ${{ steps.parse_manifest.outputs.repo_names }} 
      repo_branches: ${{ steps.parse_manifest.outputs.repo_branches }}  

    steps:
      - name: Checkout Coordinator Repo
        uses: actions/checkout@v4

      - name: Parse Integration Manifest and Count Repositories in Pending Changesets
        id: parse_manifest
        run: |
          PR_COUNT=$(yq eval '.changesets[0].repositories | length' integration.yaml)
          REPO_NAMES=$(yq eval '.changesets[0].repositories | map(.name) | @json' integration.yaml)
          REPO_BRANCHES=$(yq eval '.changesets[0].repositories | map(.ref) | @json' integration.yaml)
          
          echo "repo_names=${REPO_NAMES}" >> $GITHUB_OUTPUT
          echo "repo_branches=${REPO_BRANCHES}" >> $GITHUB_OUTPUT

  build_repositories:
    runs-on: ubuntu-latest
    needs: count_pending_prs
    strategy:
      matrix:
        repo: ${{ fromJson(needs.count_pending_prs.outputs.repo_names) }}  
        branch: ${{ fromJson(needs.count_pending_prs.outputs.repo_branches) }}  

    steps:
      - name: Checkout Repository for PR
        if: env.repo_check != 'KO'
        run: |
          REPO_NAME=${{ matrix.repo }}
          REPO_BRANCH=${{ matrix.branch }}
          ORG_NAME=kalidux
          echo "ðŸ”„ Clonage du repo $REPO_NAME et checkout de la branche $REPO_BRANCH"
          git clone "https://github.com/$ORG_NAME/$REPO_NAME.git"
          cd $REPO_NAME
          git fetch --all
          git checkout $REPO_BRANCH || git checkout -b $REPO_BRANCH origin/$REPO_BRANCH

          # Liste les fichiers pour vÃ©rifier que build.sh est lÃ 
          ls -al

      - name: Build Repository
        if: env.repo_check != 'KO'
        run: |
          echo "ðŸš€ Build du repo ${{ matrix.repo }} sur la branche ${{ matrix.branch }}"
          chmod +x build.sh  # Donne les droits d'exÃ©cution Ã  build.sh
          ./build.sh  # ExÃ©cute le script

      - name: Tests 
        if: env.repo_check != 'KO'
        run: |
          echo "Running tests for ${{ matrix.repo }} on branch ${{ matrix.branch }}"
          chmod +x test.sh
          ./test.sh
